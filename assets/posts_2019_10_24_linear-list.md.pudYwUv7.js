import{_ as i,o as s,c as a,a as l}from"./chunks/framework.heUNgYAJ.js";const g=JSON.parse('{"title":"线性表","description":"","frontmatter":{"title":"线性表","date":"2019-10-24T19:30:32.000Z","updated":"2019-10-24T19:30:32.000Z","categories":["Computer Science","Data Structure","Linear List"],"tags":["Data Structure"]},"headers":[{"level":1,"title":"线性表","slug":"线性表","link":"#线性表","children":[{"level":2,"title":"ADT","slug":"adt","link":"#adt","children":[]},{"level":2,"title":"顺序储存(数组)","slug":"顺序储存-数组","link":"#顺序储存-数组","children":[]},{"level":2,"title":"链式储存","slug":"链式储存","link":"#链式储存","children":[{"level":3,"title":"循环链表","slug":"循环链表","link":"#循环链表","children":[]},{"level":3,"title":"双向链表","slug":"双向链表","link":"#双向链表","children":[]},{"level":3,"title":"静态链表","slug":"静态链表","link":"#静态链表","children":[]}]},{"level":2,"title":"查找","slug":"查找","link":"#查找","children":[]}]},{"level":1,"title":"Queue","slug":"queue","link":"#queue","children":[{"level":2,"title":"应用","slug":"应用","link":"#应用","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[{"level":3,"title":"链队列","slug":"链队列","link":"#链队列","children":[]},{"level":3,"title":"循环队列 (数组实现)","slug":"循环队列-数组实现","link":"#循环队列-数组实现","children":[]}]}]},{"level":1,"title":"Stack","slug":"stack","link":"#stack","children":[{"level":2,"title":"应用","slug":"应用-1","link":"#应用-1","children":[]},{"level":2,"title":"实现","slug":"实现-1","link":"#实现-1","children":[{"level":3,"title":"顺序栈","slug":"顺序栈","link":"#顺序栈","children":[]},{"level":3,"title":"链栈","slug":"链栈","link":"#链栈","children":[]}]}]}],"relativePath":"posts/2019/10/24/linear-list.md","filePath":"posts/2019/10/24/linear-list.md"}'),e={name:"posts/2019/10/24/linear-list.md"},n=l(`<h1 id="线性表" tabindex="-1">线性表 <a class="header-anchor" href="#线性表" aria-label="Permalink to &quot;线性表&quot;">​</a></h1><p><strong>定义</strong>: 在数据元素的非空有限集合中, 除第一个元素无直接前驱, 最后一个元素无直接后继节点外, 每个元素都有唯一的直接前驱和直接后继节点.</p><h2 id="adt" tabindex="-1">ADT <a class="header-anchor" href="#adt" aria-label="Permalink to &quot;ADT&quot;">​</a></h2><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, i)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, i , e)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">del</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, i, e)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">locate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L, e)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(L)</span></span></code></pre></div><h2 id="顺序储存-数组" tabindex="-1">顺序储存(数组) <a class="header-anchor" href="#顺序储存-数组" aria-label="Permalink to &quot;顺序储存(数组)&quot;">​</a></h2><ul><li>可索引</li><li>插入, 删除慢</li><li>长度受限</li></ul><h2 id="链式储存" tabindex="-1">链式储存 <a class="header-anchor" href="#链式储存" aria-label="Permalink to &quot;链式储存&quot;">​</a></h2><ul><li>插入, 删除快</li><li>无法索引</li><li>查询慢</li></ul><h3 id="循环链表" tabindex="-1">循环链表 <a class="header-anchor" href="#循环链表" aria-label="Permalink to &quot;循环链表&quot;">​</a></h3><ul><li>将最后一个指针指向表头节点</li><li>从每个节点都可以访问整个列表</li><li>查找前驱节点复杂度为 O(n)</li></ul><h3 id="双向链表" tabindex="-1">双向链表 <a class="header-anchor" href="#双向链表" aria-label="Permalink to &quot;双向链表&quot;">​</a></h3><ul><li>每个节点都保存指向前驱节点和后继节点的指针</li><li>查找前驱节点复杂度为 O(1)</li></ul><h3 id="静态链表" tabindex="-1">静态链表 <a class="header-anchor" href="#静态链表" aria-label="Permalink to &quot;静态链表&quot;">​</a></h3><ul><li>适用于没有指针/引用的语言</li><li>用大数组模拟内存分配, 记录下一个节点的 index</li></ul><h2 id="查找" tabindex="-1">查找 <a class="header-anchor" href="#查找" aria-label="Permalink to &quot;查找&quot;">​</a></h2><ol><li>顺序查找法</li></ol><p><code>Data data[SIZE + 1]</code> data[0] 为监视哨, 存放查找元素关键字</p><ol start="2"><li><p>二分法</p><ul><li>顺序结构存储</li><li>按大小有序排列</li></ul></li><li><p>分块查找法</p><ul><li>块内无序</li><li>块与块之间有序</li></ul></li></ol><h1 id="queue" tabindex="-1">Queue <a class="header-anchor" href="#queue" aria-label="Permalink to &quot;Queue&quot;">​</a></h1><p>限定性线性表, FIFO</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Q)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Q)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isFull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Q)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Q)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Q)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Q)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Q)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shift</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Q)</span></span></code></pre></div><h2 id="应用" tabindex="-1">应用 <a class="header-anchor" href="#应用" aria-label="Permalink to &quot;应用&quot;">​</a></h2><p>打印杨辉三角</p><p><strong>优先队列是二叉堆实现</strong></p><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><p>队头指针: front</p><p>队尾指针: rear</p><h3 id="链队列" tabindex="-1">链队列 <a class="header-anchor" href="#链队列" aria-label="Permalink to &quot;链队列&quot;">​</a></h3><p>特殊情况: front === rear</p><h3 id="循环队列-数组实现" tabindex="-1">循环队列 (数组实现) <a class="header-anchor" href="#循环队列-数组实现" aria-label="Permalink to &quot;循环队列 (数组实现)&quot;">​</a></h3><p>当 rear &lt; front 时, 说明出现循环</p><p>push 时, 当 rear + 1 === MAX_SIZE 时, 令 rear = 0</p><h1 id="stack" tabindex="-1">Stack <a class="header-anchor" href="#stack" aria-label="Permalink to &quot;Stack&quot;">​</a></h1><p>栈是一种限定性线性表, 遵循 LIFO</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(S)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(S)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(S)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isFull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(S)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(S, x)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(S)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(S)</span></span></code></pre></div><h2 id="应用-1" tabindex="-1">应用 <a class="header-anchor" href="#应用-1" aria-label="Permalink to &quot;应用&quot;">​</a></h2><ul><li>Hanoi</li><li>递归调用栈 (优化: TCO, 蹦床函数)</li><li>表达式求值</li></ul><h2 id="实现-1" tabindex="-1">实现 <a class="header-anchor" href="#实现-1" aria-label="Permalink to &quot;实现&quot;">​</a></h2><h3 id="顺序栈" tabindex="-1">顺序栈 <a class="header-anchor" href="#顺序栈" aria-label="Permalink to &quot;顺序栈&quot;">​</a></h3><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Stack_Size</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Element </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Stack_Size];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> top;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} Stack;</span></span></code></pre></div><h3 id="链栈" tabindex="-1">链栈 <a class="header-anchor" href="#链栈" aria-label="Permalink to &quot;链栈&quot;">​</a></h3><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Stack_Size</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Element data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  StackNode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} StackNode;</span></span></code></pre></div>`,42),t=[n];function h(p,k,r,d,c,o){return s(),a("div",null,t)}const u=i(e,[["render",h]]);export{g as __pageData,u as default};
