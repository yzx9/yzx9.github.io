import{g as s,h as a,o as n,j as e}from"./chunks/framework.BOQ8FqoK.js";const i="/assets/commitizen.DYY8krI0.png",k=JSON.parse('{"title":"Git Angular 规范","description":"","frontmatter":{"title":"Git Angular 规范","date":"2021-01-02T16:01:28.000Z","updated":"2021-01-02T16:01:28.000Z","categories":["computer science"],"tags":["git"]},"headers":[{"level":1,"title":"AngularJS Git Commit Message Conventions","slug":"angularjs-git-commit-message-conventions","link":"#angularjs-git-commit-message-conventions","children":[{"level":2,"title":"目标","slug":"目标","link":"#目标","children":[]},{"level":2,"title":"格式","slug":"格式","link":"#格式","children":[{"level":3,"title":"Message Header","slug":"message-header","link":"#message-header","children":[]},{"level":3,"title":"Message Body","slug":"message-body","link":"#message-body","children":[]},{"level":3,"title":"Message Footer","slug":"message-footer","link":"#message-footer","children":[]},{"level":3,"title":"Examples","slug":"examples","link":"#examples","children":[]}]},{"level":2,"title":"插件","slug":"插件","link":"#插件","children":[{"level":3,"title":"Commitizen","slug":"commitizen","link":"#commitizen","children":[]},{"level":3,"title":"validate-commit-msg","slug":"validate-commit-msg","link":"#validate-commit-msg","children":[]},{"level":3,"title":"conventional-changelog","slug":"conventional-changelog","link":"#conventional-changelog","children":[]}]}]}],"relativePath":"posts/2021/01/02/angularjs-git-commit-message-conventions.md","filePath":"posts/2021/01/02/angularjs-git-commit-message-conventions.md"}'),p={name:"posts/2021/01/02/angularjs-git-commit-message-conventions.md"},l=e(`<h1 id="angularjs-git-commit-message-conventions" tabindex="-1">AngularJS Git Commit Message Conventions <a class="header-anchor" href="#angularjs-git-commit-message-conventions" aria-label="Permalink to &quot;AngularJS Git Commit Message Conventions&quot;">​</a></h1><blockquote><p>via: <a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.uyo6cb12dt6w" target="_blank" rel="noreferrer">Git Commit Message Conventions</a></p></blockquote><p>Git 中每次 commit，都需要书写 commit message：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello world&quot;</span></span></code></pre></div><p>每次使用 <code>git log</code> 时，一份清晰的commit message 可以帮助我们快速找到所需的 commit，AngularJS Git Commit Message Conventions 就是帮助你写好它。</p><h2 id="目标" tabindex="-1">目标 <a class="header-anchor" href="#目标" aria-label="Permalink to &quot;目标&quot;">​</a></h2><ul><li>提供更多的历史信息，方便浏览</li><li>允许过滤 commit 便于查找</li><li>可以通过脚本生成 Change log</li></ul><h2 id="格式" tabindex="-1">格式 <a class="header-anchor" href="#格式" aria-label="Permalink to &quot;格式&quot;">​</a></h2><p>Message 由 Header、Body（Optional）和 Footer（Optional）组成，通过空行连接：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></span>
<span class="line"><span>&lt;BLANK LINE&gt;</span></span>
<span class="line"><span>&lt;body&gt;</span></span>
<span class="line"><span>&lt;BLANK LINE&gt;</span></span>
<span class="line"><span>&lt;footer&gt;</span></span></code></pre></div><p>同时，每行不应超过100字符，这是避免自动换行影响美观。</p><h3 id="message-header" tabindex="-1">Message Header <a class="header-anchor" href="#message-header" aria-label="Permalink to &quot;Message Header&quot;">​</a></h3><p>Header 只有一行，由 type、scope（optional）和 subject 组成。</p><h4 id="type" tabindex="-1">type <a class="header-anchor" href="#type" aria-label="Permalink to &quot;type&quot;">​</a></h4><p>规定的类型如下：</p><ul><li>feat：新功能（feature）</li><li>fix：修补bug</li><li>docs：文档（documentation）</li><li>style： 格式（formatting）</li><li>refactor：重构</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动，例如 deps、ci</li></ul><p>还有一种特殊情况</p><ul><li>revert：撤销以前的 commit，后面跟着被撤销 Commit 的 Header。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>revert: feat(pencil): add &#39;graphiteWidth&#39; option</span></span>
<span class="line"><span></span></span>
<span class="line"><span>This reverts commit 667ecc1654a317a13331b17617d973392f415f02.</span></span></code></pre></div><p>Body部分的格式是固定的，必须写成<code>This reverts commit &lt;hash&gt;.</code></p><p>如果当前 commit 与被撤销的 commit，在同一次发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的<code>Reverts</code>小标题下面。</p><h4 id="scope" tabindex="-1">scope <a class="header-anchor" href="#scope" aria-label="Permalink to &quot;scope&quot;">​</a></h4><p>项目的范围，或是用于关联 Issue（#1)。</p><h4 id="subject" tabindex="-1">subject <a class="header-anchor" href="#subject" aria-label="Permalink to &quot;subject&quot;">​</a></h4><p>对于 change 的一行简短的描述</p><ul><li>use imperative, present tense: “change” not “changed” nor “changes”</li><li>don&#39;t capitalize first letter</li><li>no dot (.) at the end</li></ul><h3 id="message-body" tabindex="-1">Message Body <a class="header-anchor" href="#message-body" aria-label="Permalink to &quot;Message Body&quot;">​</a></h3><h3 id="message-footer" tabindex="-1">Message Footer <a class="header-anchor" href="#message-footer" aria-label="Permalink to &quot;Message Footer&quot;">​</a></h3><p>主要用于标记破坏性更新和关闭Issue</p><h4 id="breaking-changes" tabindex="-1">BREAKING CHANGES <a class="header-anchor" href="#breaking-changes" aria-label="Permalink to &quot;BREAKING CHANGES&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>BREAKING CHANGE: isolate scope bindings definition has changed and</span></span>
<span class="line"><span>    the inject option for the directive controller injection was removed.</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    To migrate the code follow the example below:</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    Before:</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    scope: {</span></span>
<span class="line"><span>      myAttr: &#39;attribute&#39;,</span></span>
<span class="line"><span>      myBind: &#39;bind&#39;,</span></span>
<span class="line"><span>      myExpression: &#39;expression&#39;,</span></span>
<span class="line"><span>      myEval: &#39;evaluate&#39;,</span></span>
<span class="line"><span>      myAccessor: &#39;accessor&#39;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    After:</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    scope: {</span></span>
<span class="line"><span>      myAttr: &#39;@&#39;,</span></span>
<span class="line"><span>      myBind: &#39;@&#39;,</span></span>
<span class="line"><span>      myExpression: &#39;&amp;&#39;,</span></span>
<span class="line"><span>      // myEval - usually not useful, but in cases where the expression is assignable, you can use &#39;=&#39;</span></span>
<span class="line"><span>      myAccessor: &#39;=&#39; // in directive&#39;s template change myAccessor() to myAccessor</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    The removed \`inject\` wasn&#39;t generaly useful for directives so there should be no code using it.</span></span></code></pre></div><h4 id="referencing-issues" tabindex="-1">Referencing Issues <a class="header-anchor" href="#referencing-issues" aria-label="Permalink to &quot;Referencing Issues&quot;">​</a></h4><p>关闭一个 Issue：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Closes #234</span></span></code></pre></div><p>或是同时关闭多个 Issues：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Closes #123, #245, #992</span></span></code></pre></div><h3 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>feat($browser): onUrlChange event (popstate/hashchange/polling)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Added new event to $browser:</span></span>
<span class="line"><span>- forward popstate event if available</span></span>
<span class="line"><span>- forward hashchange event if popstate not available</span></span>
<span class="line"><span>- do polling when neither popstate nor hashchange available</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Breaks $browser.onHashChange, which was removed (use onUrlChange instead)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>fix($compile): couple of unit tests for IE9</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Older IEs serialize html uppercased, but IE9 does not...</span></span>
<span class="line"><span>Would be better to expect case insensitive, unfortunately jasmine does</span></span>
<span class="line"><span>not allow to user regexps for throw expectations.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Closes #392</span></span>
<span class="line"><span>Breaks foo.bar api, foo.baz should be used instead</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>feat(directive): ng:disabled, ng:checked, ng:multiple, ng:readonly, ng:selected</span></span>
<span class="line"><span></span></span>
<span class="line"><span>New directives for proper binding these attributes in older browsers (IE).</span></span>
<span class="line"><span>Added coresponding description, live examples and e2e tests.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Closes #351</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>style($location): add couple of missing semi colons</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docs(guide): updated fixed docs from Google Docs</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Couple of typos fixed:</span></span>
<span class="line"><span>- indentation</span></span>
<span class="line"><span>- batchLogbatchLog -&gt; batchLog</span></span>
<span class="line"><span>- start periodic checking</span></span>
<span class="line"><span>- missing brace</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>feat($compile): simplify isolate scope bindings</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Changed the isolate scope binding options to:</span></span>
<span class="line"><span>  - @attr - attribute binding (including interpolation)</span></span>
<span class="line"><span>  - =model - by-directional model binding</span></span>
<span class="line"><span>  - &amp;expr - expression execution binding</span></span>
<span class="line"><span></span></span>
<span class="line"><span>This change simplifies the terminology as well as</span></span>
<span class="line"><span>number of choices available to the developer. It</span></span>
<span class="line"><span>also supports local name aliasing from the parent.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>BREAKING CHANGE: isolate scope bindings definition has changed and</span></span>
<span class="line"><span>the inject option for the directive controller injection was removed.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>To migrate the code follow the example below:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Before:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>scope: {</span></span>
<span class="line"><span>  myAttr: &#39;attribute&#39;,</span></span>
<span class="line"><span>  myBind: &#39;bind&#39;,</span></span>
<span class="line"><span>  myExpression: &#39;expression&#39;,</span></span>
<span class="line"><span>  myEval: &#39;evaluate&#39;,</span></span>
<span class="line"><span>  myAccessor: &#39;accessor&#39;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>After:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>scope: {</span></span>
<span class="line"><span>  myAttr: &#39;@&#39;,</span></span>
<span class="line"><span>  myBind: &#39;@&#39;,</span></span>
<span class="line"><span>  myExpression: &#39;&amp;&#39;,</span></span>
<span class="line"><span>  // myEval - usually not useful, but in cases where the expression is assignable, you can use &#39;=&#39;</span></span>
<span class="line"><span>  myAccessor: &#39;=&#39; // in directive&#39;s template change myAccessor() to myAccessor</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>The removed \`inject\` wasn&#39;t generaly useful for directives so there should be no code using it.</span></span></code></pre></div><h2 id="插件" tabindex="-1">插件 <a class="header-anchor" href="#插件" aria-label="Permalink to &quot;插件&quot;">​</a></h2><h3 id="commitizen" tabindex="-1">Commitizen <a class="header-anchor" href="#commitizen" aria-label="Permalink to &quot;Commitizen&quot;">​</a></h3><blockquote><p>via: <a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noreferrer">Github</a></p></blockquote><p>Commitizen 用于帮助书写合格的 commit message，安装如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commitizen</span></span></code></pre></div><p>然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">commitizen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cz-conventional-changelog</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-exact</span></span></code></pre></div><p>最后，将<code>git commit</code>改为使用<code>git cz</code>即可。</p><p><img src="`+i+`" alt="commitizen"></p><h3 id="validate-commit-msg" tabindex="-1">validate-commit-msg <a class="header-anchor" href="#validate-commit-msg" aria-label="Permalink to &quot;validate-commit-msg&quot;">​</a></h3><blockquote><p>via: <a href="https://www.npmjs.com/package/validate-commit-msg" target="_blank" rel="noreferrer">npm</a></p></blockquote><p>validate-commit-msg 用于校验 commit message 是否符合规则，安装如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> validate-commit-msg</span></span></code></pre></div><p>然后可以通过 git hooks 来调用，例如 husky：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span></span></code></pre></div><p>并添加 hook：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;husky&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;hooks&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;commitmsg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;validate-commit-msg&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="conventional-changelog" tabindex="-1">conventional-changelog <a class="header-anchor" href="#conventional-changelog" aria-label="Permalink to &quot;conventional-changelog&quot;">​</a></h3><blockquote><p>via: <a href="https://github.com/conventional-changelog/conventional-changelog" target="_blank" rel="noreferrer">Github</a></p></blockquote><p>用于生成 Change log，步骤如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> conventional-changelog</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-project</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">conventional-changelog</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> angular</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CHANGELOG.md</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span></span></code></pre></div>`,64),t=[l];function o(c,h,r,d,g,m){return n(),a("div",null,t)}const b=s(p,[["render",o]]);export{k as __pageData,b as default};
