import{g as e,h as l,o as t,j as a}from"./chunks/framework.BOQ8FqoK.js";const i="/assets/avl-tree.C8ejHFdk.png",r="/assets/avl-tree-rebalancing.DuKpDJQV.png",k=JSON.parse('{"title":"平衡二叉树（AVL树）","description":"","frontmatter":{"title":"平衡二叉树（AVL树）","date":"2021-01-02T14:00:00.000Z","updated":"2021-01-02T14:00:00.000Z","categories":["Computer Science","Data Structure","Tree"],"tags":["Data Structure"]},"headers":[{"level":1,"title":"平衡二叉树","slug":"平衡二叉树","link":"#平衡二叉树","children":[{"level":2,"title":"插入","slug":"插入","link":"#插入","children":[]},{"level":2,"title":"删除","slug":"删除","link":"#删除","children":[]},{"level":2,"title":"查找","slug":"查找","link":"#查找","children":[]},{"level":2,"title":"失衡","slug":"失衡","link":"#失衡","children":[]}]}],"relativePath":"posts/2021/01/02/avl-tree.md","filePath":"posts/2021/01/02/avl-tree.md"}'),o={name:"posts/2021/01/02/avl-tree.md"},s=a('<h1 id="平衡二叉树" tabindex="-1">平衡二叉树 <a class="header-anchor" href="#平衡二叉树" aria-label="Permalink to &quot;平衡二叉树&quot;">​</a></h1><p>平衡二叉查找树，简称：平衡二叉树，由前苏联的数学家 Adelse-Velskil 和 Landis 在1962 年提出的高度平衡的二叉树，根据科学家的英文名也称为AVL 树。指的是所有节点平衡因子的绝对值不大于1的二叉树叫做平衡二叉树。</p><p>你可以通过 <a href="https://www.cs.usfca.edu/~galles/visualization/AVLtree.html" target="_blank" rel="noreferrer">AVL Tree Visualzation</a> 来模拟AVL树的各个操作。</p><blockquote><p>平衡因子：左子树高减去右子树高</p></blockquote><blockquote><p>平衡二叉树并不一定是一个完全二叉树，例如高度为4且非叶子节点平衡因子均为1的AVL树</p><p><img src="'+i+'" alt="image-20210115121840387"></p><p>由上图我们还可以发现，高度为4的AVL树最少有7个节点，最多有15个节点</p></blockquote><h2 id="插入" tabindex="-1">插入 <a class="header-anchor" href="#插入" aria-label="Permalink to &quot;插入&quot;">​</a></h2><p>插入操作与二叉排序树相似，但插入后可能引起[失衡][#失衡]。</p><ol><li>通过排序规则选择合适的插入位置</li><li>创建一新的叶子节点，插入该位置</li><li>向上更新路径上每个节点的平衡因子，当平衡因子的绝对值大于1时引起失衡，先进行平衡操作</li><li>重复步骤3，直到达到根节点</li></ol><h2 id="删除" tabindex="-1">删除 <a class="header-anchor" href="#删除" aria-label="Permalink to &quot;删除&quot;">​</a></h2><p>插入操作与二叉排序树相似，但插入后可能引起[失衡][#失衡]。</p><ol><li>通过查找规则找到删除节点，找不到则结束，如果为只有一个节点的树的根节点，则删除根节点后结束</li><li>找到删除节点在中序遍历中的前驱节点或后继节点（必为叶子节点）</li><li>交换两节点，删除叶子节点</li><li>向上更新路径上每个节点的平衡因子，当平衡因子的绝对值大于1时引起失衡，先进行平衡操作</li><li>重复步骤4，直到达到根节点</li></ol><h2 id="查找" tabindex="-1">查找 <a class="header-anchor" href="#查找" aria-label="Permalink to &quot;查找&quot;">​</a></h2><p>查找操作与二叉排序树相同，因为AVL树总是平衡的，所以耗费O(log <em>n</em>)时间。AVL树不会因查找过程而改变。</p><h2 id="失衡" tabindex="-1">失衡 <a class="header-anchor" href="#失衡" aria-label="Permalink to &quot;失衡&quot;">​</a></h2><ul><li><strong>LL</strong>：对失衡节点顺时针旋转</li><li><strong>LR</strong>：对失衡节点左孩子节点逆时针旋转，对失衡节点顺时针旋转</li><li><strong>RR</strong>：对失衡节点逆时针旋转</li><li><strong>RL</strong>：对失衡节点左孩子节点顺时针旋转，对失衡节点逆时针旋转</li></ul><p><img src="'+r+'" alt="AVL Tree Rebalancing"></p>',16),n=[s];function c(p,d,h,u,_,g){return t(),l("div",null,n)}const b=e(o,[["render",c]]);export{k as __pageData,b as default};
