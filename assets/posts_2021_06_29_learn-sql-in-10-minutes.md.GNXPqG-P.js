import{_ as s,o as i,c as a,a as n}from"./chunks/framework.heUNgYAJ.js";const o=JSON.parse('{"title":"Learn SQL in 10 Minutes","description":"","frontmatter":{"date":"2021-6-29","update":"2021-6-29","categories":["Computer Science","Language","SQL"],"tags":["SQL"]},"headers":[{"level":1,"title":"Learn SQL in 10 Minutes","slug":"learn-sql-in-10-minutes","link":"#learn-sql-in-10-minutes","children":[{"level":2,"title":"分组与聚集函数","slug":"分组与聚集函数","link":"#分组与聚集函数","children":[{"level":3,"title":"聚集函数","slug":"聚集函数","link":"#聚集函数","children":[]},{"level":3,"title":"HAVING与WHERE","slug":"having与where","link":"#having与where","children":[]}]},{"level":2,"title":"SELECT语句顺序","slug":"select语句顺序","link":"#select语句顺序","children":[]},{"level":2,"title":"联结","slug":"联结","link":"#联结","children":[{"level":3,"title":"自联结","slug":"自联结","link":"#自联结","children":[]},{"level":3,"title":"内联结和外联结","slug":"内联结和外联结","link":"#内联结和外联结","children":[]},{"level":3,"title":"自然联结","slug":"自然联结","link":"#自然联结","children":[]},{"level":3,"title":"带聚集函数的联结","slug":"带聚集函数的联结","link":"#带聚集函数的联结","children":[]}]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}]}],"relativePath":"posts/2021/06/29/learn-sql-in-10-minutes.md","filePath":"posts/2021/06/29/learn-sql-in-10-minutes.md"}'),l={name:"posts/2021/06/29/learn-sql-in-10-minutes.md"},h=n(`<h1 id="learn-sql-in-10-minutes" tabindex="-1">Learn SQL in 10 Minutes <a class="header-anchor" href="#learn-sql-in-10-minutes" aria-label="Permalink to &quot;Learn SQL in 10 Minutes&quot;">​</a></h1><p>芜湖，好大的名字，不过只是原书部分摘抄 😊</p><h2 id="分组与聚集函数" tabindex="-1">分组与聚集函数 <a class="header-anchor" href="#分组与聚集函数" aria-label="Permalink to &quot;分组与聚集函数&quot;">​</a></h2><h3 id="聚集函数" tabindex="-1">聚集函数 <a class="header-anchor" href="#聚集函数" aria-label="Permalink to &quot;聚集函数&quot;">​</a></h3><p>与函数不同，聚集函数在多数DBMS上兼容，主要有MAX, MIN, SUM, AVG五个</p><ul><li>多数聚集函数都会忽略值为NULL的行，包括MAX, MIN, SUM, AVG</li><li>如果不指定列名COUNT(*)会计算所有列，但如果指定列名COUNT(COLUMN_NAME)则会忽略该列中为NULL值的行</li></ul><h3 id="having与where" tabindex="-1">HAVING与WHERE <a class="header-anchor" href="#having与where" aria-label="Permalink to &quot;HAVING与WHERE&quot;">​</a></h3><p>HAVING 和 WHERE 非常相识，如果不指定 GROUP BY ，多数 DBMS 同等对待它们。不过，你需要区分它们，HAVING 应结合 GROUP BY，而 WHERE 用于标准的行级过滤。</p><p>对于二者的区别，最简单的解释是 WHERE 在 GROUP 前过滤，而 HAVING 在 GROUP 后过滤，也就是说 WHERE 排除的行不被包括在 GROUP 内。考虑下列代码：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vend_id, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num_prods</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Products</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prod_price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vend_id</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HAVING</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div><p>这一段代码中，WHERE 无法代替 HAVING 的功能，因为其生效于分组前。</p><h2 id="select语句顺序" tabindex="-1">SELECT语句顺序 <a class="header-anchor" href="#select语句顺序" aria-label="Permalink to &quot;SELECT语句顺序&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HAVING</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span></span></code></pre></div><h2 id="联结" tabindex="-1">联结 <a class="header-anchor" href="#联结" aria-label="Permalink to &quot;联结&quot;">​</a></h2><h3 id="自联结" tabindex="-1">自联结 <a class="header-anchor" href="#自联结" aria-label="Permalink to &quot;自联结&quot;">​</a></h3><p>自联结当然就是和自己联结啦，通常用子查询也能完成：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cust_id, cust_name, cust_contact</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Customers</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cust_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cust_name</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                   FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Customers</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                   WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cust_contact </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Jim Jones&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>换成自联结后代码明了许多，不过要记得给表加别名：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cust_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">c1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cust_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">c1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cust_contact</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Customers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c1, Customers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cust_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cust_name</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AND</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cust_contact</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Jin Jones&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>自联结不仅仅是语法上清晰，而且性能往往比子查询好，许多 DBMS 处理联结远比处理子查询快得多。</p><h3 id="内联结和外联结" tabindex="-1">内联结和外联结 <a class="header-anchor" href="#内联结和外联结" aria-label="Permalink to &quot;内联结和外联结&quot;">​</a></h3><p>内联结（Inner Join）又称等值联结（Equijoin），标准写法如下：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vend_name, prod_name, prod_price</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vendors</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INNER JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Products </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Vendors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vend_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Products</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vend_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>不过你也可以用一个更简单的写法：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vend_name, prod_name, prod_price</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vendors, Products</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Vendors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vend_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Products</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vend_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>这一写法非常有趣，尤其是当你忘记写 WHERE 子句时候，将会创造一个笛卡尔积（M*N，其中M表示左表行数，N表示右表行数）。</p><div class="tip custom-block"><p class="custom-block-title">是否使用缩写？</p><p>SQL中存在好多缩写，除了内联结，还有 GROUP BY 等子句的列名可以用列序号代替。不过，缩写常常会带来一些其他问题，比如降低了可维护性，当你修改列顺序后还需要同步修改子句，或者是上文提到的漏掉 WHERE 子句后，会带来巨大的性能损耗，并且往往得不到提示。</p><p>除了缩写，还有使用函数也会导致可移植性的降低，性能与便捷不可兼得， 取性能而舍便捷也。不过一切随你，毕竟我们不是警察 👮‍♂️</p></div><p>外联结（Outer Join）可以分为 LEFT OUTER JOIN、RIGHT OUTER JOIN和FULL OUTER JOIN，三者的主要区别在于当存在两表中存在另一个表中不存在的数据时的联结策略。左联结时将以左表数据为准联结右表，也就是左表中存在而右表中不存在的数据不会被包含在联结表中，右联结则相反，全联结表中两侧数据都会存在，因此全联结表中字段类型都是 Nullable 的。</p><h3 id="自然联结" tabindex="-1">自然联结 <a class="header-anchor" href="#自然联结" aria-label="Permalink to &quot;自然联结&quot;">​</a></h3><p>自然联结更像是一个语法糖，其会将两个表中具有相同名称、相同值类型的公共字段自然而然的联结在一起，而不需要联结的限定条件。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,v.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> productinfo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NATURAL JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vendors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v</span></span></code></pre></div><h3 id="带聚集函数的联结" tabindex="-1">带聚集函数的联结 <a class="header-anchor" href="#带聚集函数的联结" aria-label="Permalink to &quot;带聚集函数的联结&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Customers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cust_id</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Orders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">order_num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num_ord</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Customers</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> LEFT OUTER JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Orders </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Customers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cust_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Orders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cust_id</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Customers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cust_id</span></span></code></pre></div><h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to &quot;Reference&quot;">​</a></h2><ul><li>Ben Forta. Sams Teach Yourself SQL in 10 Minutes</li></ul>`,35),t=[h];function e(p,k,r,d,E,g){return i(),a("div",null,t)}const y=s(l,[["render",e]]);export{o as __pageData,y as default};
