import{g as e,h as a,o as n,j as s}from"./chunks/framework.BOQ8FqoK.js";const o="/assets/clean-code-rules.DmUdICSm.png",g=JSON.parse(`{"title":"代码整洁之道","description":"","frontmatter":{"date":"2021-3-11","updated":"2021-3-11","categories":["Computer Science","Coding Style"],"tags":["Clean Code"]},"headers":[{"level":1,"title":"代码整洁之道","slug":"代码整洁之道","link":"#代码整洁之道","children":[{"level":2,"title":"命名","slug":"命名","link":"#命名","children":[]},{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[{"level":3,"title":"Don't Repeat Yourself","slug":"don-t-repeat-yourself","link":"#don-t-repeat-yourself","children":[]}]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}]}],"relativePath":"posts/2021/03/11/clean-code.md","filePath":"posts/2021/03/11/clean-code.md"}`),t={name:"posts/2021/03/11/clean-code.md"},l=s('<h1 id="代码整洁之道" tabindex="-1">代码整洁之道 <a class="header-anchor" href="#代码整洁之道" aria-label="Permalink to &quot;代码整洁之道&quot;">​</a></h1><p>试想一段乱七八糟的代码，<code>if/else</code>、 <code>for</code> 和 <code>switch</code> 反复嵌套，代码需要翻上两三次才能看到底，可能还没有测试代码……</p><p>毫无疑问，没有人愿意维护这样一段代码，每个接手它的人，都选择在复杂的分支条件中加上几句代码，而不愿意重构它，这样一段代码，将一个系统拉入深坑，直到没有人再愿意去维护它。虽然工程中告诉我们没有修改才是最稳定的，但是对于一段代码而言，没有重构也就意味着它彻底死去。</p><p><img src="'+o+`" alt="Clean code rules"></p><h2 id="命名" tabindex="-1">命名 <a class="header-anchor" href="#命名" aria-label="Permalink to &quot;命名&quot;">​</a></h2><p>从写下第一行代码开始，命名就不断纠缠着程序员，作为”两大难题“之一，命名显得格外重要。</p><blockquote><p>There are only two hard things in Computer Science: cache invalidation and naming things.</p><p>-- Phil Karlton</p></blockquote><p>选取一个命名首先应该是一个有意义的命名，并且是一个没有误导性的名称：</p><ul><li><code>accountList</code> 不是一个好名称，最好不要用一个<code>list</code>来表示一个列表，即使它真的是一个列表，它对程序员有特殊的意义，至少<code>accounts</code>都比它好</li><li><code>a1</code> <code>a2</code> 也不是个好名称，除了循环变量常常是 <code>i</code> <code>j</code> <code>k</code> 外，尽量用一个有意义的名字</li><li><code>nameString</code> 更离谱了，难不成 <code>name</code> 会是个浮点数？对了，还有 <code>Variable</code> <code>Info</code>……</li><li><code>HolyHandGrenade</code> 说实话我查了会儿词典才懂得这和 <code>DeleteItems</code> 是一个意思，别用这类与文化紧密相关的命名（也许哪天是个老外维护你的代码呢</li><li><code>HP</code> 是什么呢，会是惠普吗？别用一个缩写了（中文名首字母就更难受了），别太在意名称的长短，现在谁的编辑器没有变量改名和智能推导呢？</li></ul><p>使用一个描述性的名称，</p><p>为了达意，你还可以为你的命名加上一个语境，例如 <code>AddrFirstName</code>、 <code>AddrLastName</code>和<code>AddrState</code>，除了可以帮助你快速了解这个字段，还可以让你的编辑器帮助你补齐字段。为了达成这一目标，你可以重新组织你的单词顺序：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// Bad</span></span>
<span class="line"><span>components/</span></span>
<span class="line"><span>|- ClearSearchButton.vue</span></span>
<span class="line"><span>|- ExcludeFromSearchInput.vue</span></span>
<span class="line"><span>|- LaunchOnStartupCheckbox.vue</span></span>
<span class="line"><span>|- RunSearchButton.vue</span></span>
<span class="line"><span>|- SearchInput.vue</span></span>
<span class="line"><span>|- TermsCheckbox.vue</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// Good</span></span>
<span class="line"><span>components/</span></span>
<span class="line"><span>|- SearchButtonClear.vue</span></span>
<span class="line"><span>|- SearchButtonRun.vue</span></span>
<span class="line"><span>|- SearchInputQuery.vue</span></span>
<span class="line"><span>|- SearchInputExcludeGlob.vue</span></span>
<span class="line"><span>|- SettingsCheckboxTerms.vue</span></span>
<span class="line"><span>|- SettingsCheckboxLaunchOnStartup.vue</span></span></code></pre></div><p>不过也别加上无用的语境，例如每个变量都加上你的公司缩写 <code>GSD(Gas Station Deluxe)</code>，即使你很爱他 😃</p><p>最后，不妨在 <a href="https://unbug.github.io/codelf/" target="_blank" rel="noreferrer">CODELF</a> 上搜搜看，看看其他人都是怎么命名的吧。</p><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><p>我们希望每一个函数都是一目了然的，但没有人能一开始就写出一段完美的代码，只有不断地重构，才能保证一段代码的生命力。</p><h3 id="don-t-repeat-yourself" tabindex="-1">Don&#39;t Repeat Yourself <a class="header-anchor" href="#don-t-repeat-yourself" aria-label="Permalink to &quot;Don&#39;t Repeat Yourself&quot;">​</a></h3><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><ul><li><p>Robert C. Martin. Clean code</p></li><li><p>Evan You. <a href="https://v3.vuejs.org/style-guide/#order-of-words-in-component-names-strongly-recommended" target="_blank" rel="noreferrer">Order of words in component names</a></p></li></ul>`,19),c=[l];function p(r,d,i,u,h,m){return n(),a("div",null,c)}const _=e(t,[["render",p]]);export{g as __pageData,_ as default};
